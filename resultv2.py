import os
import logging
import requests
import schedule
import time
import telebot
import threading
from dotenv import load_dotenv
from googletrans import Translator
from typing import Dict, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('weather_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

if not BOT_TOKEN or not WEATHER_API_KEY:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("–¢—Ä–µ–±—É–µ—Ç—Å—è BOT_TOKEN –∏ WEATHER_API_KEY")

bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {chat_id: {"city": str, "language": str}}
users: Dict[int, Dict[str, str]] = {}
UPDATE_INTERVAL_MINUTES = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç–∞—Ö
DEFAULT_LANGUAGE = 'ru'


class WeatherServiceError(Exception):
    pass


class TranslationError(Exception):
    pass


def get_weather(city: str, language: str = DEFAULT_LANGUAGE) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    :param city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :param language: –Ø–∑—ã–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
    :return: –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ
    :raises: WeatherServiceError –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API
    """
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang={language}"
        response = requests.get(url, timeout=10)
        data = response.json()

        if data.get("cod") != 200:
            error_message = data.get("message", "Unknown error")
            raise WeatherServiceError(f"API error: {error_message}")

        temperature = data["main"]["temp"]
        description = data["weather"][0]["description"]
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]

        return (
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
            f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description.capitalize()}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
        )

    except requests.exceptions.RequestException as e:
        raise WeatherServiceError(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
    except (KeyError, IndexError) as e:
        raise WeatherServiceError("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã")


def translate_text(text: str, dest_language: str = DEFAULT_LANGUAGE) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫
    :param text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
    :param dest_language: –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫
    :return: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    :raises: TranslationError –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
    """
    try:
        translator = Translator()
        translated = translator.translate(text, dest=dest_language)
        return translated.text
    except Exception as e:
        raise TranslationError(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")


def send_weather_update(chat_id: int, city: str, language: str = DEFAULT_LANGUAGE):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param city: –ì–æ—Ä–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã
    :param language: –Ø–∑—ã–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã
    """
    try:
        weather = get_weather(city, language)
        bot.send_message(chat_id, weather)
        logger.info(f"Weather update sent to {chat_id} for {city}")
    except WeatherServiceError as e:
        error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}: {str(e)}"
        bot.send_message(chat_id, error_msg)
        logger.error(error_msg)
    except Exception as e:
        logger.error(f"Unexpected error for {chat_id}: {str(e)}")


def send_updates_to_all_users():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    logger.info("Starting scheduled weather updates...")
    for chat_id, user_info in users.copy().items():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            send_weather_update(chat_id, user_info["city"], user_info.get("language", DEFAULT_LANGUAGE))
        except Exception as e:
            logger.error(f"Failed to update for {chat_id}: {str(e)}")
    logger.info("Scheduled updates completed")


def schedule_periodic_updates():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    schedule.every(UPDATE_INTERVAL_MINUTES).minutes.do(send_updates_to_all_users)
    logger.info(f"Weather updates scheduled every {UPDATE_INTERVAL_MINUTES} minutes")

    while True:
        try:
            schedule.run_pending()
            time.sleep(1)
        except Exception as e:
            logger.error(f"Scheduler error: {str(e)}")
            time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    welcome_text = (
        "üå§Ô∏è –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "/start - –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã\n"
        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "/change - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥\n"
        "/now - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É\n"
        "/language - –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ (ru/en)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –Ω–∞—á–Ω—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É!"
    )
    bot.send_message(message.chat.id, welcome_text)
    bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É?")
    bot.register_next_step_handler(message, process_city_input)


def process_city_input(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    try:
        city = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_weather = get_weather(city)

        users[message.chat.id] = {
            "city": city,
            "language": DEFAULT_LANGUAGE
        }

        bot.send_message(
            message.chat.id,
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}.\n"
            f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–µ {UPDATE_INTERVAL_MINUTES} –º–∏–Ω—É—Ç.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /now —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É."
        )
        # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        send_weather_update(message.chat.id, city)

    except WeatherServiceError as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{message.text}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        bot.register_next_step_handler(message, process_city_input)
    except Exception as e:
        logger.error(f"Error processing city input: {str(e)}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@bot.message_handler(commands=['stop'])
def stop_updates(message):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.chat.id in users:
        del users[message.chat.id]
        bot.send_message(message.chat.id, "üî¥ –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.")
    else:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")


@bot.message_handler(commands=['now'])
def send_current_weather(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    if message.chat.id not in users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é /start")
        return

    user_info = users[message.chat.id]
    try:
        bot.send_message(message.chat.id, "‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É...")
        send_weather_update(message.chat.id, user_info["city"], user_info.get("language", DEFAULT_LANGUAGE))
    except Exception as e:
        logger.error(f"Error in /now command: {str(e)}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(commands=['change'])
def change_city(message):
    """–ò–∑–º–µ–Ω—è–µ—Ç –≥–æ—Ä–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:")
    bot.register_next_step_handler(message, process_city_input)


@bot.message_handler(commands=['language'])
def change_language(message):
    """–ò–∑–º–µ–Ω—è–µ—Ç —è–∑—ã–∫ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã"""
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–†—É—Å—Å–∫–∏–π', 'English')

    msg = bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–≥–æ–¥—ã:",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, process_language_selection)


def process_language_selection(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    lang_map = {'—Ä—É—Å—Å–∫–∏–π': 'ru', 'english': 'en'}
    selected = message.text.lower()

    if selected not in lang_map:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")
        return

    if message.chat.id not in users:
        users[message.chat.id] = {"city": "", "language": lang_map[selected]}
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é /start")
        return

    users[message.chat.id]["language"] = lang_map[selected]
    bot.send_message(
        message.chat.id,
        f"üåç –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}. –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ.",
        reply_markup=telebot.types.ReplyKeyboardRemove()
    )


@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    bot.send_message(
        message.chat.id,
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    )


def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    while True:
        try:
            logger.info("Starting bot polling...")
            bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"Bot crashed: {str(e)}")
            time.sleep(10)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    threading.Thread(target=schedule_periodic_updates, daemon=True).start()
    threading.Thread(target=run_bot, daemon=True).start()

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–æ—Å—Ç–æ –∂–¥–µ—Ç
    while True:
        time.sleep(1)
